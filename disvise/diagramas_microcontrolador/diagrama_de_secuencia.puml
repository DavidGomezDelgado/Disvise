@startuml
actor Usuario
participant main_cpp as "main.cpp"
participant logiccpp_h as "logiccpp.h"
participant setup_cpp as "setup.cpp"
participant setup_wifi_cpp as "setup_wifi.cpp"
participant setup_deep_sleep_cpp as "setup_deep_sleep.cpp"
participant handleButtons_cpp as "handleButtons.cpp"

== Setup ==
Usuario -> main_cpp: inicio del dispositivo
main_cpp -> setup_cpp: setup(tft, targetTime)
setup_cpp -> setup_wifi_cpp: setup_wifi()
setup_wifi_cpp --> setup_cpp: conexión WiFi establecida

setup_cpp -> setup_deep_sleep_cpp: setup_deep_sleep()
setup_deep_sleep_cpp --> setup_cpp: configuración deep sleep

setup_cpp -> handleButtons_cpp: attachInterrupts()
handleButtons_cpp --> setup_cpp: interrupciones configuradas

setup_cpp --> main_cpp: setup completado
@enduml

@startuml
actor Usuario
participant main_cpp as "main.cpp"
participant loop_cpp as "loop.cpp"
participant recibirDeApi_cpp as "recibirDeAPI.cpp"
participant show_screen_cpp as "show_screen.cpp"
participant mandarPeticion_cpp as "mandarPeticion.cpp"
participant deep_sleep_mode_cpp as "deep_sleep_mode.cpp"
participant handleButtons_cpp as "handleButtons.cpp"

== Loop principal ==
Usuario -> main_cpp: ejecución loop()
main_cpp -> loop_cpp: loop(tft, targetTime, running)

alt estado == 0
    loop_cpp -> show_screen_cpp: show_screen(function, place, tft)
    show_screen_cpp --> loop_cpp
    loop_cpp -> loop_cpp: estado = 1
end

alt estado == 1
    loop_cpp -> recibirDeApi_cpp: recibirDeAPI(function, place)
    recibirDeApi_cpp --> loop_cpp
    alt function != -1
        loop_cpp -> loop_cpp: estado = 2
    else
        loop_cpp -> deep_sleep_mode_cpp: deep_sleep_mode(suspendedtime)
        deep_sleep_mode_cpp --> loop_cpp
    end
end

alt estado == 2
    loop_cpp -> show_screen_cpp: show_screen(function, place, tft)
    show_screen_cpp --> loop_cpp
    loop_cpp -> loop_cpp: mostrar botones
    loop_cpp -> loop_cpp: estado = 3
end

alt estado == 3
    loop_cpp -> handleButtons_cpp: espera botón o timeout
    alt timeout
        loop_cpp -> deep_sleep_mode_cpp: deep_sleep_mode(suspendedtime)
    else botón presionado
        alt botón 1
            handleButtons_cpp -> loop_cpp: estado = 4
        else botón 2
            handleButtons_cpp -> loop_cpp: estado = 5
        end
    end
end

alt estado == 4
    loop_cpp -> mandarPeticion_cpp: mandarPeticion(function)
    mandarPeticion_cpp --> loop_cpp
    loop_cpp -> deep_sleep_mode_cpp: deep_sleep_mode(suspendedtime)
end

alt estado == 5
    loop_cpp -> loop_cpp: estado = 0 (solicitar nueva petición)
end
@enduml
